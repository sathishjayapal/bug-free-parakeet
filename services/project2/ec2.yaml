AWSTemplateFormatVersion: 2010-09-09
Description: Deploy template 2 - Project 2
Parameters:
  AmazonLinuxAMIID:
    Type: String
    Description: Enter Sathish Machine AMI ID
    Default: ami-04ad2567c9e3d7893
  CFNStackName:
    Type: String
    Description: Enter stackname
    Default: mynewvpcdefn
  BastionAMI:
    Type: String
    Description: Enter Bastion Information
    Default: ami-00a36856283d67c39
Resources:
  WebServerInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t2.micro
      SecurityGroupIds: !Split
        - ","
        - Fn::ImportValue:
            !Sub "${CFNStackName}-WebInstanceSecurityGroup"
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${CFNStackName}-PrivateSubnet1"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y update
          yum -y install httpd php mysql php-mysql
          /usr/bin/systemctl enable httpd
          /usr/bin/systemctl start httpd
          cd /var/www/html
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-100-ACCLFO-2/lab6-scaling/lab-app.zip
          unzip lab-app.zip -d /var/www/html/
          chown apache:root /var/www/html/rds.conf.php
      Tags:
        - Key: name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - ''
              - !Ref AmazonLinuxAMIID
  WebServerInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t2.micro
      SecurityGroupIds: !Split
        - ","
        - Fn::ImportValue:
            !Sub "${CFNStackName}-WebInstanceSecurityGroup"
      SubnetId:
        Fn::ImportValue:
          Fn::Sub: "${CFNStackName}-PrivateSubnet2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y update
          yum -y install httpd php mysql php-mysql
          /usr/bin/systemctl enable httpd
          /usr/bin/systemctl start httpd
          cd /var/www/html
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-100-ACCLFO-2/lab6-scaling/lab-app.zip
          unzip lab-app.zip -d /var/www/html/
          chown apache:root /var/www/html/rds.conf.php
      Tags:
        - Key: name
          Value: !Join
            - ''
            - - !Ref AWS::StackName
              - ''
              - !Ref AmazonLinuxAMIID
  MyALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: MyDefaultALBTarget
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${CFNStackName}-MyVPC"
      Targets:
        - Id: !Ref WebServerInstance2
        - Id: !Ref WebServerInstance1
      UnhealthyThresholdCount: 3
  MyLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: MyAlB
      SecurityGroups:
        - Fn::ImportValue:
            !Sub "${CFNStackName}-ALBSecurityGroup"
      Subnets: !Split
        - ","
        - Fn::ImportValue:
            !Sub "${CFNStackName}-PUBLICSUBNET3"
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "forward"
          TargetGroupArn:
            Ref: MyALBTargetGroup
      LoadBalancerArn:
        !Ref MyLoadBalancer
Outputs:
  WebServerInstance1:
    Value: !Join
      - ''
      - - !Ref AWS::StackName
        - ''
        - !Ref WebServerInstance1
  WebServerInstance2:
    Value: !Join
      - ''
      - - !Ref AWS::StackName
        - ''
        - !Ref WebServerInstance2
  ALBInformation:
    Value: !Join
      - ''
      - - !Ref AWS::StackName
        - ''
        - !Ref MyLoadBalancer
